using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace Core
{
    [XmlRoot("device")]
    public class Device
    {
        [XmlElement(ElementName = "name")]
        public string Name;
        [XmlArray("peripherals"), XmlArrayItem("peripheral")]
        public List<Peripheral> Peripherals;

        public override string ToString() => Name;

        public string GenerateCppHeader()
        {
            var sb = new StringBuilder();

            sb.AppendLine($"// THIS FILE IS AUTOGENERATED")
                .AppendLine()
                .AppendLine("#include <cstdint>")
                .AppendLine()
                .AppendLine($"namespace {Name} {{")
                .Append(' ', 4)
                .AppendLine("using u32 = uint32_t;");

            foreach (var peripheral in Peripherals)
            {
                sb.Append(peripheral.GenerateCppHeader());
            }

            sb.AppendLine("}");

            return sb.ToString();
        }
    }

    public class Peripheral
    {
        [XmlAttribute(AttributeName = "derivedFrom")]
        public string BasePeripheralName;
        [XmlElement(ElementName = "name")]
        public string Name;
        [XmlElement(ElementName = "description")]
        public string Description;
        [XmlArray("registers"), XmlArrayItem("register")]
        public List<Register> Registers;

        public string GenerateCppHeader()
        {
            var sb = new StringBuilder();
            var oneStringDescription = Description?.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim());
            var comment = string.Join(' ', oneStringDescription ?? new string[0]);

            sb.AppendLine();
            if (!string.IsNullOrWhiteSpace(comment))
            {
                sb.Append(' ', 4).AppendLine($"// {comment}");
            }

            sb.Append(' ', 4)
                .AppendLine($"struct {Name}")
                .Append(' ', 4)
                .AppendLine("{");

            foreach (var register in Registers)
            {
                sb.Append(register.GenerateCppHeader());
            }

            sb.Append(' ', 4)
                .AppendLine("};")
                .AppendLine();

            return sb.ToString();
        }

        public override string ToString()
        {
            if (string.IsNullOrWhiteSpace(Description))
                return $"{Name}";

            return $"{Name}: {Description}";
        }
    }

    public class Register
    {
        [XmlElement(ElementName = "name")]
        public string Name;
        [XmlElement(ElementName = "description")]
        public string Description;
        [XmlArray("fields"), XmlArrayItem("field")]
        public List<Bitfield> Bitfields;

        public string GenerateCppHeader()
        {
            var sb = new StringBuilder();

            var oneStringDescription = Description?.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(s => s.Trim());
            var comment = string.Join(' ', oneStringDescription ?? new string[0]);

            if (Bitfields.Any())
            {
                sb.Append(' ', 8)
                    .AppendLine("union {")
                    .Append(' ', 12)
                    .AppendLine($"volatile u32 {Name};")
                    .AppendLine()
                    .Append(' ', 12)
                    .AppendLine("struct {");

                foreach (var bitfield in Bitfields)
                {
                    sb.Append(bitfield.GenerateCppHeader());
                }

                sb.Append(' ', 12)
                    .AppendLine($"}} {Name}Bits;")
                    .Append(' ', 8)
                    .AppendLine("};");
            }
            else
            {
                sb.Append(' ', 8)
                    .Append($"volatile u32 {Name};");

                if (!string.IsNullOrWhiteSpace(comment))
                {
                    sb.AppendLine($" // {comment}");
                }
                else
                {
                    sb.AppendLine();
                }
            }

            return sb.ToString();
        }

        public override string ToString()
        {
            if (string.IsNullOrWhiteSpace(Description))
                return $"{Name}";

            return $"{Name}: {Description}";
        }
    }

    public class Bitfield
    {
        [XmlElement(ElementName = "name")]
        public string Name;
        [XmlElement(ElementName = "description")]
        public string Description;
        [XmlElement(ElementName = "bitWidth")]
        public int Width;
        [XmlElement(ElementName = "bitOffset")]
        public int Offset;

        public string GenerateCppHeader()
        {
            var sb = new StringBuilder();

            sb.Append(' ', 16);
            if (string.IsNullOrEmpty(Name))
            {
                sb.AppendLine($"volatile u32 : {Width};");
            }
            else
            {
                sb.AppendLine($"volatile u32 {Name} : {Width};");
            }

            return sb.ToString();
        }

        public override string ToString()
        {
            if (string.IsNullOrWhiteSpace(Description))
                return $"{Name}; Offset {Offset}; Width {Width}";

            return $"{Name}: {Description}; Offset {Offset}; Width {Width}";
        }
    }
}

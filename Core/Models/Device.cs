using Core.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace Core.Models
{
    [XmlRoot("device")]
    public class Device
    {
        [XmlElement(ElementName = "name")]
        public string Name;

        [XmlElement(ElementName = "version")]
        public string Version { get; set; }

        [XmlElement(ElementName = "description")]
        public string Description;

        [XmlElement(ElementName = "cpu")]
        public Cpu Cpu { get; set; }

        [XmlElement(ElementName = "addressUnitBits")]
        public int MinimumBitsAddressable { get; set; }

        [XmlElement(ElementName = "width")]
        public int MaximumSingleTransferDataWidthBits { get; set; }

        [XmlElement(ElementName = "size")]
        public string DefaultRegisterWidthBitsString
        {
            get => string.Concat("0x", DefaultRegisterWidthBits.ToString("X2"));
            set => DefaultRegisterWidthBits = Convert.ToUInt32(value, 16);
        }

        [XmlIgnore]
        public uint DefaultRegisterWidthBits { get; set; }

        [XmlElement(ElementName = "resetValue")]
        public string DefaultResetValueString
        {
            get => string.Concat("0x", DefaultResetValue.ToString("X8"));
            set => DefaultResetValue = Convert.ToUInt32(value, 16);
        }

        [XmlIgnore]
        public uint DefaultResetValue { get; set; }

        [XmlElement(ElementName = "resetMask")]
        public string DefaultResetMaskString
        {
            get => string.Concat("0x", DefaultResetMask.ToString("X8"));
            set => DefaultResetMask = Convert.ToUInt32(value, 16);
        }

        [XmlIgnore]
        public uint DefaultResetMask { get; set; }

        [XmlArray("peripherals"), XmlArrayItem("peripheral")]
        public List<Peripheral> Peripherals;

        public static Device FromXmlFile(string path)
        {
            using FileStream fs = File.OpenRead(path);
            XmlSerializer serializer = new XmlSerializer(typeof(Device));
            var device = (Device)serializer.Deserialize(fs);

            device.NormalizeDescriptions();
            device.Peripherals = device.Peripherals.OrderBy(p => p.BaseAddress).ToList();

            foreach (var peripheral in device.Peripherals)
            {
                peripheral.Registers = peripheral.Registers.OrderBy(r => r.AddressOffset).ToList();
            }
            device.FillPeripheralDerivatives();
            return device;
        }

        public async Task GenerateCppHeaderAsync(CancellationToken ct)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// This file is autogenerated")
                .AppendLine()
                .AppendLine($"// {Name}")
                .AppendLine($"// {Description}")
                .AppendLine()
                .AppendLine("#pragma once")
                .AppendLine();

            foreach (Peripheral peripheral in Peripherals)
            {
                sb.AppendLine($"#include \"{peripheral.Name}.h\"");

                await using var peripheralFile = File.Create($"{peripheral.Name}.h");
                await using var peripheralHeader = new StreamWriter(peripheralFile, Encoding.UTF8);

                var peripheralSb = new StringBuilder();
                peripheralSb.AppendLine("// This file is autogenerated")
                    .AppendLine()
                    .AppendLine($"// {Name}: {peripheral.Name}")
                    .AppendLine($"// {peripheral.Description}")
                    .AppendLine()
                    .AppendLine("#pragma once")
                    .AppendLine()
                    .AppendLine("#include <cstdint>")
                    .AppendLine("#include \"Register.h\"")
                    .AppendLine()
                    .AppendLine("namespace Core {")
                    .AppendLine("    namespace RegisterMasks {")
                    .AppendLine($"        namespace {peripheral.Name} {{");

                foreach (Register register in peripheral.Registers)
                {
                    peripheralSb.AppendLine($"            enum class {register.Name}Mask : u{register.Width} {{");

                    foreach (Field field in register.Fields)
                    {
                        peripheralSb.AppendLine(
                            $"                {field.Name} = {Math.Pow(2, field.Width) - 1}U << {field.Offset}, // {field.Description}");
                    }
                    
                    peripheralSb.AppendLine("            };")
                        .AppendLine(
                            $"            constexpr {register.Name}Mask operator&({register.Name}Mask left, {register.Name}Mask right) {{")
                        .AppendLine(
                            $"                return ({register.Name}Mask)((u{register.Width})left & (u{register.Width})right);")
                        .AppendLine("            }")
                        .AppendLine(
                            $"            constexpr {register.Name}Mask operator|({register.Name}Mask left, {register.Name}Mask right) {{")
                        .AppendLine(
                            $"                return ({register.Name}Mask)((u{register.Width})left | (u{register.Width})right);")
                        .AppendLine("            }")
                        .AppendLine(
                            $"            constexpr {register.Name}Mask operator~({register.Name}Mask mask) {{")
                        .AppendLine(
                            $"                return ({register.Name}Mask)(~((u{register.Width})mask));")
                        .AppendLine("            }")
                        .AppendLine();
                }

                peripheralSb.AppendLine("        }")
                    .AppendLine("    }")
                    .AppendLine()
                    .AppendLine($"    namespace Registers {{")
                    .AppendLine($"        namespace {peripheral.Name} {{");

                foreach (Register register in peripheral.Registers)
                {
                    peripheralSb.AppendLine(
                        $"            using {register.Name} = Core::Register<u{register.Width}, Core::RegisterMasks::{peripheral.Name}::{register.Name}Mask>; // {register.Description}");
                }

                peripheralSb.AppendLine("        }")
                    .AppendLine("    }")
                    .AppendLine()
                    .AppendLine($"    namespace Peripherals {{")
                    .AppendLine($"        class {peripheral.Name} {{")
                    .AppendLine("        public:")
                    .AppendLine($"            {peripheral.Name}() = delete;");

                foreach (Register register in peripheral.Registers)
                {
                    peripheralSb.AppendLine($"            Registers::{peripheral.Name}::{register.Name} {register.Name};");
                }

                peripheralSb.AppendLine("        };")
                    .AppendLine("    }")
                    .AppendLine()
                    .AppendLine($"    Peripherals::{peripheral.Name} * const {peripheral.Name} = reinterpret_cast<Peripherals::{peripheral.Name} *>({peripheral.BaseAddressString});")
                    .AppendLine("}");

                await peripheralHeader.WriteAsync(peripheralSb, ct);
            }

            await using var file = File.Create($"{Name}.h");
            await using var header = new StreamWriter(file, Encoding.UTF8);

            await header.WriteAsync(sb, ct);
        }

        public override string ToString() => Name;

        private Device()
        { }

        private void NormalizeDescriptions()
        {
            Description = Description.ManyToOneLine();
            foreach (var peripheral in Peripherals)
            {
                peripheral.Description = peripheral.Description.ManyToOneLine();
                foreach (var register in peripheral.Registers)
                {
                    register.Description = register.Description.ManyToOneLine();
                    foreach (var field in register.Fields)
                    {
                        field.Description = field.Description.ManyToOneLine();
                    }
                }
            }
        }

        private void FillPeripheralDerivatives()
        {
            var derivativePeripherals = Peripherals.Where(p => !string.IsNullOrEmpty(p.BasePeripheralName));
            foreach (var peripheral in derivativePeripherals)
            {
                var basePeripheral = Peripherals.First(p => p.Name.Equals(peripheral.BasePeripheralName));
                peripheral.Registers = basePeripheral.Registers;
                peripheral.Description = basePeripheral.Description;
                peripheral.GroupName = basePeripheral.GroupName;
            }
        }
    }
}

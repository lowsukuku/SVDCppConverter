using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace Core.Models
{
    public class Peripheral
    {
        [XmlAttribute(AttributeName = "derivedFrom")]
        public string BasePeripheralName;

        [XmlElement(ElementName = "name")]
        public string Name;

        [XmlElement(ElementName = "description")]
        public string Description;

        [XmlElement(ElementName = "groupName")]
        public string GroupName { get; set; }

        [XmlElement(ElementName = "baseAddress")]
        public string BaseAddressString
        {
            get => string.Concat("0x", BaseAddress.ToString("X8"));
            set => BaseAddress = Convert.ToUInt32(value, 16);
        }

        [XmlIgnore]
        public uint BaseAddress { get; set; }

        [XmlArray("registers"), XmlArrayItem("register")]
        public List<Register> Registers;

        public override string ToString() => string.IsNullOrWhiteSpace(Description) ? $"{Name}" : $"{Name}: {Description}";

        public async Task GenerateCppHeaderAsync(CancellationToken ct)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// This file is autogenerated")
                .AppendLine()
                .AppendLine($"// {Name}")
                .AppendLine($"// {Description}")
                .AppendLine()
                .AppendLine("#pragma once")
                .AppendLine()
                .AppendLine("#include <cstdint>")
                .AppendLine("#include \"Register.h\"")
                .AppendLine()

                .AppendLine("namespace Core {")
                .Append(GenerateRegisterMasks())
                .Append(GenerateRegisters())
                .Append(CreatePeripherals())
                .AppendLine("}");

            await using var peripheralFile = File.Create($"{Name}.h");
            await using var peripheralHeader = new StreamWriter(peripheralFile, Encoding.UTF8);
            await peripheralHeader.WriteAsync(sb, ct);
        }

        private string GenerateRegisterMasks()
        {
            var sb = new StringBuilder();
            sb.AppendLine("    namespace RegisterMasks {")
                .AppendLine($"        namespace {Name} {{");

            foreach (Register register in Registers)
            {
                sb.Append(register.GenerateRegisterMask());
            }

            sb.AppendLine("        }")
                .AppendLine("    }")
                .AppendLine();
            return sb.ToString();
        }

        private string GenerateRegisters()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"    namespace Registers {{")
                .AppendLine($"        namespace {Name} {{");

            foreach (Register register in Registers)
            {
                sb.AppendLine(register.GenerateClassCode(Name));
            }

            sb.AppendLine("        }")
                .AppendLine("    }")
                .AppendLine();
            return sb.ToString();
        }

        private string CreatePeripherals()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"    namespace Peripherals {{")
                .AppendLine($"        class {Name} {{")
                .AppendLine("        public:")
                .AppendLine($"            {Name}() = delete;");

            foreach (Register register in Registers)
            {
                sb.AppendLine(register.GenerateFieldsCode(Name));
            }

            sb.AppendLine("        };")
                .AppendLine("    }")
                .AppendLine()
                .AppendLine(
                    $"    Peripherals::{Name} * const {Name.ToLower()} = reinterpret_cast<Peripherals::{Name} *>({BaseAddressString});");
            return sb.ToString();
        }
    }
}
